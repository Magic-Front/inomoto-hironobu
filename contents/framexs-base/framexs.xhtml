<?xml version="1.0"?>
<?xml-stylesheet type="application/xml" href="../../framexs.xsl"?>
<?framexs.skeleton ../../template/template.xhtml?>
<?framexs.properties ../../properties/properties.xml?>
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja">
<head>
<meta charset="UTF-8"/>
<title>Framexsとは</title>
<meta name="description" content="XSLTフレームワークのFramexsとは何かを解説する。"/>
<meta name="modified" content="2021-09-17"/>
</head>
<body>
<ol id="breadcrumb">
<li class="breadcrumb-item"><a href="/">Home</a></li>
<li class="breadcrumb-item"><a href="/contents/framexs-base/index.xhtml">Framexsの基礎</a></li>
</ol>
<article>
<section id="premain">
<p>Framexsは、XHTMLをMVC（<b>モデル・ビュー・コントローラ</b>）の材料として、合成を行い、HTMLを生成するXSLTフレームワークです。<br/>
モデルとビューの両方ともXHTMLを使い、ウェブサイトではコントローラーもXHTMLに処理命令という形で埋めこんでいます。
<br />このフレームワークは、フロントエンドXSLT技術であるxml-stylesheet処理命令を利用しています。</p>
<figure>
<pre><code class="language xml"><![CDATA[<?xml-stylesheet type="application/xml" href="../../framexs.xsl"?>]]></code></pre>
</figure>
</section>
<section id="main">
<section>
<h2>サンプルコード</h2>
<p>Framexsのサンプルコードを見てみましょう。
<br />以下の図は、Framexsの代表的なディレクトリ構成です。今回は、この構成でのFramexsのはたらきについて取り上げていきます。</p>

<ul class="branch_F">
<li class="branch_T">/framexs.xsl</li>
<li class="branch_L"><span class="branch_SF"></span>/sample</li><ul>
<li class="branch_L"><span class="branch_SF"></span>/1</li>
<ul><li class="branch_T">/template.xhtml</li>
                      <li class="branch_L">/contents.xhtml</li></ul></ul>
</ul>
<figure>
<figcaption>tempalte.xhtml</figcaption>
<pre><code class="language xml c10"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:framexs="urn:framexs" xml:lang="ja" lang="ja">
<head>
<title> - テンプレートタイトル</title>
</head>
<body>
<h1>あいさつ</h1>
<article><p framexs:id-d="main">コンテンツのid属性がmainの部分を読み込み置き換える</p></article>
</body>
</html>]]></code></pre>
</figure>
<figure>
<figcaption>content.xhtml</figcaption>
<pre><code class="language xml c13"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="application/xml" href="../../framexs.xsl"?>
<?framexs.skeleton template.xhtml?>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>世界よこんにちは</title>
</head>
<body>
<div id="main">
<p>ハローワールド！</p>
</div>
</body>
</html>]]></code></pre>
</figure>
<p><b>template.xhtml</b>はビュー、<b>content.xhtml</b>はモデル・コントローラーとして機能します。</p>
<p><kbd>contents.xhtml</kbd>をブラウザで表示すると、以下のようになります。<br/><a href="/sample/1/contents.xhtml" target="_blank" rel="noopener noreferrer" onclick="window.open('/sample/1/contents.xhtml', '', 'width=600,height=300'); return false;"><span class="out_link"></span> 実行結果を表示する（contents.xhtml）</a></p>
<figure>
<figcaption>実際の<b>contents.xhtml</b>のソースコード</figcaption>
<pre><code class="language xml c13"><![CDATA[<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xml:lang="ja" lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>世界よこんにちは - テンプレートタイトル</title>
</head>
<body>
<h1>あいさつ</h1>
<article>
<p>ハローワールド！</p>
</article>
</body>
</html>]]></code></pre>
</figure>
<p>このように、元々のcontents.xhtmlからソースコードが変化していることが分かります。<i>tempalte.xhtml</i>によって定義したテンプレートに従い、Fremexsがコードを書き換えているのです。</p>
</section>
<section>
<h2>Fremexsを使う意義</h2>
<p>Fremexsの強みは、<i>link</i>要素や<i>script</i>要素などの記述のあるテンプレートを、全てのページで簡単に共有できる点が挙げられる。
<br/><br/>
例えば、次のようなコードを記述したい場合、</p>
<figure>
<figcaption>コード5</figcaption>
<pre><code class="language xml c7"><![CDATA[<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
  j=d.createElement(s),dl=l!='dataLayer'?'&amp;l='+l:'';j.async=true;j.src=
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-5L2SQ9B');</script>
<!-- End Google Tag Manager -->]]></code></pre>
</figure>
<p>この記述をHTMLファイルに挿入する場合、<strong>全ての</strong>HTMLにこの記述を挿入して、上書き保存する必要があります。
<br/><br/>
つまり、プログラムに変更があった場合、そのたびに全てのHTMLを書き換えることが必要となります。1～2ページ程度の小規模な個人サイトならまだしも、何百・千とページがある大規模なサイトでは、対応するのは極めて困難です。
<br/>
<br/>
しかしFramexsを使えば、テンプレートを書き換えるだけで全てのHTMLに適応されるため、作業工程の大幅短縮が可能です。</p>
</section>
<section>
<h2>原初法との比較</h2>
<p>XSLTが開発された当初、その意義としてあるXMLに対しての再利用性がうたわれていました。例えば、以下のようなコードを出力したい場合、次のようなXMLを出力していました。</p>
<figure>
<figcaption>コード6</figcaption>  
<pre><code class="language xml c5"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<hoge xmlns="urn:hoge">
<foo>世界よこんにちは</foo>
<bar>ハローワールド！</bar>
</hoge>
]]></code></pre>
</figure>
<p>これは、単純にXSLを適用するだけのシンプルなコードです。<b>XMLとXSLTを合成することでHTML</b>を生成するシステムを、当サイトでは<dfn>原初法</dfn>と定義します。<br /><br />
これに対し、Framexsは<strong>2種類のXHTMLとXSLTを合わせた“3つの要素”を合成することでHTML</strong>を生成するシステムです。</p>

<UL>
<LI>原初法：<b>XML+XSLT=HTML</b></LI>
<LI>Framexs：<b>XHTML+XHTML+XSLT=HTML</b></LI>
</UL>
<p>両者の違いは、出力のひな型をXSLTにするか、独自のXHTMLにするかという点です。原初法と比べるとFramexsの方が直観的に扱え容易性が高く、再利用性が高いという点で優れたシステムとなっています。</p>
</section>
<section>
<h2>このサイトもFramexsでできています</h2>
<p>このページ自身もFramexsで作成されており、その先頭部分は以下の通りである。</p>
<figure>
<figcaption>コード7</figcaption>
<pre><code class="language xml c2"><![CDATA[<?xml-stylesheet type="application/xml" href="../../framexs.xsl"?>
<?framexs.skeleton ../../template/template.xhtml?>]]></code></pre>
</figure>
<p>ソースコードは<a href="https://github.com/inomoto-hironobu/inomoto-hironobu.github.io/blob/master/contents/knowledge/framexs.xhtml">GitHubのページ</a>も参照されたい。</p>
</section>
<section>
<h2>CSSフレームワークとの相性</h2>
<p>FramexsはCSSフレームワークとの相性が抜群に良い。<i>link</i>要素や<i>script</i>要素の決まりきったボイラープレートコードはテンプレートに集約され、また <i>class="container"</i> などの決まりきった構成もまたテンプレートに集約することができる。</p>
</section>
<section>
<h2>Buildless性</h2>
<p>FramexsはBuildless（ビルド不要）である。<br/><i>Node.js</i>コマンドに頼らずとも静的サイトの簡易な構築を可能にする。</p>
</section>
<section>
<h2>動的サイトとの相性</h2>
<p>現時点では実証されておらず、PHP等を用いた動的サイトの構築はできない。<br/>
今後の研究の進展が待たれる。</p>
</section>
</section>
<section id="coda">
<p>このようにXSLTのフレームワークは静的サイト構築を容易にしデザインを優れたものにする。<br/>
このページ自身がそうであるし、ここのサイト全体がそうである。</p>
</section>
</article>
</body>
</html>
